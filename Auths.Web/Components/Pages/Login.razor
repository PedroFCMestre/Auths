@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Web
@inject ITokenAcquisition Token

@rendermode InteractiveServer
@inject NavigationManager Navigation

<PageTitle>Azure EntraID</PageTitle>

<h3>Azure EntraID Authentication</h3>

@* <button class="btn btn-primary" @onclick="EntraIdLogin">Azure EntraID Login</button>
<button class="btn btn-primary" @onclick="EntraIdLogout">Azure EntraID Logout</button> *@

<a class="btn btn-primary" href="MicrosoftIdentity/Account/SignIn">Login</a>
<a class="btn btn-primary" href="MicrosoftIdentity/Account/SignOut">Logout</a>
@* <a class="btn btn-primary" href="MicrosoftIdentity/Account/SignOut?post_logout_redirect_uri=https://localhost:7259/">Logout</a> *@


<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <button class="btn btn-primary" @onclick="GetAccessToken">GetAccessToken</button>
            <br />
            <b>AcessToken:</b> @accessToken

            <br /><br /><br /><br />

            <h3>User Claims</h3>

            @if (claims.Any())
            {
                <ul>
                    @foreach (var claim in claims)
                    {
                        <li><b>@claim.Type:</b> @claim.Value</li>
                    }
                </ul>
            }

        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>



@code {
    private IEnumerable<Claim> claims = [];

    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }
    private string accessToken = "";

    protected override async Task OnInitializedAsync()
    {

        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // claims = authState.User.Claims;

        if (AuthState == null)
        {
            return;
        }

        var authState = await AuthState;
        claims = authState.User.Claims;
    }

    /*private void EntraIdLogin()
    {
        //use this page if you dont add the service: builder.Services.AddControllers().AddMicrosoftIdentityUI();
        //Navigation.NavigateTo("azure-login", forceLoad: true);

        Navigation.NavigateTo("MicrosoftIdentity/Account/SignIn", forceLoad: true);
    }

    private void EntraIdLogout()
    {
        //use this page if you dont add the service: builder.Services.AddControllers().AddMicrosoftIdentityUI();
        //Navigation.NavigateTo("azure-logout", forceLoad: true);

        Navigation.NavigateTo("MicrosoftIdentity/Account/SignOut", forceLoad: true);
    }*/

    private async Task GetAccessToken(MouseEventArgs e)
    {
        accessToken = await Token.GetAccessTokenForUserAsync([""]);
    }
}
